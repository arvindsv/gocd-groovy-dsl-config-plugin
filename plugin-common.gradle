/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
  options.deprecation = true
  options.encoding = 'utf-8'
  options.debug = true
  options.warnings = true
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-serial,-rawtypes"
}

tasks.withType(Jar) { jarTask ->
  includeEmptyDirs false
  duplicatesStrategy DuplicatesStrategy.EXCLUDE

  preserveFileTimestamps = false
  reproducibleFileOrder = true

  ['MD5', 'SHA1', 'SHA-256'].each { algo ->
    jarTask.outputs.files("${jarTask.archivePath}.${algo}")
    jarTask.doLast {
      ant.checksum file: jarTask.archivePath, format: 'MD5SUM', algorithm: algo
    }
  }

  manifest {
    attributes(
      'Go-Version': project.pluginDesc.goCdVersion,
      'Plugin-Revision': project.pluginDesc.version,
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Source-Compatibility': project.sourceCompatibility,
      'Target-Compatibility': project.targetCompatibility,
      'Git-SHA': project.gitRevision,
    )
  }
}

def generatedResourcesOutput = file("src/main/resources-generated")
def generatedResourcesInput = file('src/main/resource-templates')

if (generatedResourcesInput.exists()) {
  sourceSets {
    main {
      resources {
        output.dir generatedResourcesOutput, builtBy: 'generateResources'
        srcDirs += generatedResourcesOutput
      }
    }

    test {
      java {
        compileClasspath += configurations.compileOnly
        runtimeClasspath += configurations.compileOnly
      }
    }
  }

  task generateResources {
    inputs.dir(generatedResourcesInput)
    outputs.dir(generatedResourcesOutput)
    inputs.properties(project.pluginDesc)

    doFirst {
      project.delete(generatedResourcesOutput)
      generatedResourcesOutput.mkdirs()

      project.copy {
        into generatedResourcesOutput
        from(generatedResourcesInput) {
          expand(project.pluginDesc)
        }
      }
    }
  }
}

project.ext.color = [
  ANSI_BOLD_WHITE: "\u001B[0;1m",
  ANSI_RESET     : "\u001B[0m",
  ANSI_RED       : "\u001B[31m",
  ANSI_GREEN     : "\u001B[32m",
  ANSI_YELLOW    : "\u001B[33m",
  ANSI_WHITE     : "\u001B[37m"
]

project.ext.symbols = [
  CHECK_MARK  : "\u2714",
  NEUTRAL_FACE: "\u0CA0_\u0CA0",
  X_MARK      : "\u2718"
]

tasks.withType(Test) {
  maxParallelForks = 1

  testLogging {
    def previousFailed = false
    exceptionFormat 'full'
    showStandardStreams = true

    beforeSuite { suite ->
      if (suite.name.startsWith("Test Run") || suite.name.startsWith("Gradle Worker")) return

      if (suite.parent != null && suite.className != null) {
        println(project.color.ANSI_BOLD_WHITE + suite.name + project.color.ANSI_RESET)
      }
    }

    beforeTest {
      if (previousFailed) {
        System.err.println("")
      }
    }

    afterTest { TestDescriptor descriptor, TestResult result ->
      previousFailed = false
      def executionTime = (result.endTime - result.startTime) / 1000
      println("    ${resultIndicator(result)}$project.color.ANSI_RESET $descriptor.name $project.color.ANSI_YELLOW($executionTime seconds)$project.color.ANSI_RESET")

      if (result.failedTestCount > 0) {
        previousFailed = true
        println('')
        println(result.exception)
      }
    }

    afterSuite { desc, result ->
      if (desc.parent != null && desc.className != null) {
        println("")
      }

      if (!desc.parent) { // will match the outermost suite
        def failStyle = project.color.ANSI_RED
        def skipStyle = project.color.ANSI_YELLOW
        def summaryStyle = summaryStyle(result)

        if (result.failedTestCount > 0) {
          failStyle = project.color.ANSI_RED
        }
        if (result.skippedTestCount > 0) {
          skipStyle = project.color.ANSI_YELLOW
        }


        println("--------------------------------------------------------------------------")
        println("Results: $summaryStyle$result.resultType$project.color.ANSI_RESET ($result.testCount tests, $project.color.ANSI_GREEN$result.successfulTestCount passed$project.color.ANSI_RESET, $failStyle$result.failedTestCount failed$project.color.ANSI_RESET, $skipStyle$result.skippedTestCount skipped$project.color.ANSI_RESET)")
        println("--------------------------------------------------------------------------")
      }
    }
  }
}

configurations.all { Configuration configuration ->
  configuration.resolutionStrategy {
    preferProjectModules()
    force 'org.javassist:javassist:3.22.0-GA'
  }
}


private String summaryStyle(result) {
  def summaryStyle = project.color.ANSI_WHITE
  switch (result.resultType) {
    case TestResult.ResultType.SUCCESS:
      summaryStyle = project.color.ANSI_GREEN
      break
    case TestResult.ResultType.FAILURE:
      summaryStyle = project.color.ANSI_RED
      break
  }
  summaryStyle
}

private String resultIndicator(result) {
  def indicator = project.color.ANSI_WHITE

  if (result.failedTestCount > 0) {
    indicator = project.color.ANSI_RED + project.symbols.X_MARK
  } else if (result.skippedTestCount > 0) {
    indicator = project.color.ANSI_YELLOW + project.symbols.NEUTRAL_FACE
  } else {
    indicator = project.color.ANSI_GREEN + project.symbols.CHECK_MARK
  }
  indicator
}

